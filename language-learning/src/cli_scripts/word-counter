#!/usr/bin/env python3

import sys
import os
import re
import getopt
import platform
import logging
import traceback

from ull.common import handle_path_string, setup_logging, VERBOSITY_OPTIONS, strip_quotes
from ull.link_grammar.dicttools import count_germs_in_dict, count_max_rule_bytes_in_dict

__version__ = "1.0.0"


def main(argv):
    """
Usage:
    word-counter -d <source_dict_file>

    destination_dict_file   Destination Link Grammar dictionary file path.
    """
    src_dict_path   = None
    count_rule_len : bool = False

    verbosity_level = logging.WARNING
    logging_level   = logging.ERROR

    try:
        app_name = str(os.path.split(__file__)[1]).split(".")[0]

        # print(app_name + " ver." + __version__)
        # print("Python v." + platform.python_version())

        opts, args = getopt.getopt(argv, "hrd:v:l:", ["help", "rule-len", "dictionary=", "verbosity=", "logging="])

        for opt, arg in opts:
            if opt in ("-h", "--help"):
                print(main.__doc__)
                return 0

            if opt in ("-r", "--rule-len"):
                count_rule_len = True

            elif opt in ("-d", "--dictionary"):
                src_dict_path = handle_path_string(arg)

            elif opt in ("-v", "--verbosity"):
                verb_key = strip_quotes(arg)

                if verb_key not in VERBOSITY_OPTIONS.keys():
                    raise getopt.GetoptError("Wrong verbosity argument value: ()".format(verb_key))

                verbosity_level = VERBOSITY_OPTIONS[verb_key]
            elif opt in ("-l", "--logging"):
                log_key = strip_quotes(arg)

                if log_key not in VERBOSITY_OPTIONS.keys():
                    raise getopt.GetoptError("Wrong logging argument value: ()".format(log_key))

                logging_level = VERBOSITY_OPTIONS[log_key]

        if src_dict_path is None:
            raise getopt.GetoptError("Source dictionary file path is not specified.")

    except getopt.GetoptError as err:
        print(str(err))
        print(main.__doc__)
        return 1

    setup_logging(verbosity_level, logging_level, os.path.split(os.environ["PWD"])[0] + "/" + app_name + ".log", "w")

    logger = logging.getLogger(app_name)

    try:
        words, rules = count_germs_in_dict(src_dict_path)

        print(f"Number of rules:\t{rules}\nNumber of words:\t{words}")

        if count_rule_len:
            len_bytes = count_max_rule_bytes_in_dict(src_dict_path)
            print(f"Maximum rule length:\t{len_bytes} bytes ({len_bytes/1024:2.2f} Kbytes)")

    except IsADirectoryError as err:
        logger.critical(str(err))
        return 1

    except NameError as err:
        logger.critical(str(err))
        return 1

    except KeyboardInterrupt:
        logger.warning("Ctrl+C triggered.")
        return 1

    except PermissionError as err:
        logger.critical(str(err))
        return 1

    except FileNotFoundError as err:
        logger.critical(str(err))
        return 1

    except Exception as err:
        logger.critical(str(type(err)) + ": " + str(err))
        logger.debug(traceback.print_exc())
        return 1

    return 0


if __name__ == "__main__":
    sys.exit(main(sys.argv[1:]))
